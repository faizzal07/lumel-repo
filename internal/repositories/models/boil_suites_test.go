// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Customers", testCustomers)
	t.Run("Orders", testOrders)
	t.Run("Products", testProducts)
}

func TestDelete(t *testing.T) {
	t.Run("Customers", testCustomersDelete)
	t.Run("Orders", testOrdersDelete)
	t.Run("Products", testProductsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Customers", testCustomersQueryDeleteAll)
	t.Run("Orders", testOrdersQueryDeleteAll)
	t.Run("Products", testProductsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Customers", testCustomersSliceDeleteAll)
	t.Run("Orders", testOrdersSliceDeleteAll)
	t.Run("Products", testProductsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Customers", testCustomersExists)
	t.Run("Orders", testOrdersExists)
	t.Run("Products", testProductsExists)
}

func TestFind(t *testing.T) {
	t.Run("Customers", testCustomersFind)
	t.Run("Orders", testOrdersFind)
	t.Run("Products", testProductsFind)
}

func TestBind(t *testing.T) {
	t.Run("Customers", testCustomersBind)
	t.Run("Orders", testOrdersBind)
	t.Run("Products", testProductsBind)
}

func TestOne(t *testing.T) {
	t.Run("Customers", testCustomersOne)
	t.Run("Orders", testOrdersOne)
	t.Run("Products", testProductsOne)
}

func TestAll(t *testing.T) {
	t.Run("Customers", testCustomersAll)
	t.Run("Orders", testOrdersAll)
	t.Run("Products", testProductsAll)
}

func TestCount(t *testing.T) {
	t.Run("Customers", testCustomersCount)
	t.Run("Orders", testOrdersCount)
	t.Run("Products", testProductsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Customers", testCustomersHooks)
	t.Run("Orders", testOrdersHooks)
	t.Run("Products", testProductsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Customers", testCustomersInsert)
	t.Run("Customers", testCustomersInsertWhitelist)
	t.Run("Orders", testOrdersInsert)
	t.Run("Orders", testOrdersInsertWhitelist)
	t.Run("Products", testProductsInsert)
	t.Run("Products", testProductsInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("Customers", testCustomersReload)
	t.Run("Orders", testOrdersReload)
	t.Run("Products", testProductsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Customers", testCustomersReloadAll)
	t.Run("Orders", testOrdersReloadAll)
	t.Run("Products", testProductsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Customers", testCustomersSelect)
	t.Run("Orders", testOrdersSelect)
	t.Run("Products", testProductsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Customers", testCustomersUpdate)
	t.Run("Orders", testOrdersUpdate)
	t.Run("Products", testProductsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Customers", testCustomersSliceUpdateAll)
	t.Run("Orders", testOrdersSliceUpdateAll)
	t.Run("Products", testProductsSliceUpdateAll)
}
